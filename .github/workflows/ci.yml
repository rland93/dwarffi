name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  test:
    name: integration tests (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        # TODO: Fix Linux tests - currently failing due to DWARF format differences
        # os: [ubuntu-latest, macos-latest]
        os: [macos-latest]
        rust: [stable]

    steps:
    - name: checkout
      uses: actions/checkout@v4

    - name: rust toolchain
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: ${{ matrix.rust }}

    - name: cache cargo registry
      uses: actions/cache@v4
      with:
        path: ~/.cargo/registry
        key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-registry-

    - name: cache cargo index
      uses: actions/cache@v4
      with:
        path: ~/.cargo/git
        key: ${{ runner.os }}-cargo-git-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-git-

    - name: cache cargo build
      uses: actions/cache@v4
      with:
        path: target
        key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-build-target-

    - name: build test C library
      working-directory: test_c
      run: |
        make clean && make
        dsymutil libtestlib.dylib

    - name: verify test library and dSYM bundle
      working-directory: test_c
      run: |
        echo "Verifying macOS dynamic library..."
        ls -la libtestlib.dylib
        file libtestlib.dylib
        echo ""
        echo "Verifying dSYM bundle..."
        ls -la libtestlib.dylib.dSYM/Contents/Resources/DWARF/
        file libtestlib.dylib.dSYM/Contents/Resources/DWARF/libtestlib.dylib

    - name: run workspace tests
      run: cargo test --workspace --verbose

    - name: run library tests
      run: cargo test -p dwarffi --verbose

    - name: run integration tests
      run: cargo test -p dwarffi --test integration_test --verbose

    - name: run type extraction tests
      run: cargo test -p dwarffi --test test_type_extraction --verbose

  js-integration:
    name: JavaScript integration tests (macOS)
    runs-on: macos-latest
    steps:
    - name: checkout
      uses: actions/checkout@v4

    - name: rust toolchain
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: stable

    - name: setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    - name: verify Node.js installation
      run: |
        node --version
        npm --version

    - name: cache cargo registry
      uses: actions/cache@v4
      with:
        path: ~/.cargo/registry
        key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-registry-

    - name: cache cargo index
      uses: actions/cache@v4
      with:
        path: ~/.cargo/git
        key: ${{ runner.os }}-cargo-git-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-git-

    - name: cache cargo build
      uses: actions/cache@v4
      with:
        path: target
        key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-build-target-

    - name: build test C library
      working-directory: test_c
      run: |
        make clean && make
        dsymutil libtestlib.dylib

    - name: run dwarffi-js integration tests
      run: cargo test --package dwarffi-js --verbose
      env:
        RUST_LOG: info

  clippy:
    name: clippy
    runs-on: ubuntu-latest
    steps:
    - name: checkout repository
      uses: actions/checkout@v4

    - name: rust toolchain
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: stable
        components: clippy

    - name: install GCC
      run: |
        sudo apt-get update
        sudo apt-get install -y gcc build-essential

    - name: build test C library
      working-directory: test_c
      run: make clean && make

    - name: run clippy
      run: cargo clippy --workspace --all-targets --all-features -- -D warnings
